// MATH AND CONVERSIONS

// ==========          Converts PX to EMs          ========== //
//                                                            //
// input's with units 100px or simple integeres 100           //
// ex: px-to-em( 32px, 16px ) result = 2em                    //
// ========================================================== //
@function px-to-em($pixels, $context: 16px) {
  @if (type-of($pixels) != "number") {
    @error "#{$pixels} must be a number ";
  }
  @if (type-of($context) != "number") {
    @error "#{$context} must be a number ";
  }
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return $pixels / $context * 1em;
}

// ==========         Converts PX to REMs          ========== //
//                                                            //
// input's with units 100px or simple integeres 100           //
// ex: px-to-em( 32px, 16px ) result = 2em                    //
// ========================================================== //
@function px-to-rem($pixels, $context: 16px) {
  @if (type-of($pixels) != "number") {
    @error "#{$pixels} must be a number ";
  }
  @if (type-of($context) != "number") {
    @error "#{$context} must be a number ";
  }
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return calc($pixels / $context) * 1rem;
}

/* Replace string */
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}
