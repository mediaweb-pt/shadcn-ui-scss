{
  "name": "drawer",
  "dependencies": [
    "vaul",
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "name": "drawer.tsx",
      "content": "import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport \"./drawer.scss\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"drawer-overlay\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\"drawer-content\", className)}\n      {...props}\n    >\n      <div />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"drawer-header\", className)} {...props} />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"drawer-footer\", className)} {...props} />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\"drawer-title\", className)}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"drawer-description\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n"
    },
    {
      "name": "drawer.scss",
      "content": ".drawer {\n  &-overlay {\n    position: fixed;\n    inset: 0;\n    z-index: 50;\n    background-color: rgba(0, 0, 0, 0.8);\n  }\n\n  &-content {\n    position: fixed;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 50;\n    margin-top: 96px;\n    display: flex;\n    height: auto;\n    flex-direction: column;\n    border-top-left-radius: var(--border-radius-soft);\n    border-top-right-radius: var(--border-radius-soft);\n    border: var(--border-size-s) solid hsl(var(--border));\n    background-color: hsl(var(--background));\n\n    > div:first-child {\n      margin-left: auto;\n      margin-right: auto;\n      margin-top: var(--space-base);\n      height: 0.5rem;\n      width: 100px;\n      border-radius: var(--border-radius-rounded);\n      background-color: hsl(var(--muted));\n    }\n  }\n\n  &-header {\n    display: grid;\n    gap: var(--space-xs);\n    padding: var(--space-base);\n    text-align: center;\n\n    @media (min-width: 640px) {\n      text-align: left;\n    }\n  }\n\n  &-footer {\n    margin-top: auto;\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-s);\n    padding: var(--space-base);\n  }\n\n  &-title {\n    font-size: var(--font-size-l);\n    font-weight: var(--font-semi-bold);\n    line-height: 1;\n    letter-spacing: -0.025em;\n  }\n\n  &-description {\n    font-size: var(--font-size-s);\n    color: hsl(var(--muted-foreground));\n  }\n}\n"
    },
    {
      "name": "drawer.stories.tsx",
      "content": "import { useState } from \"react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\nimport { Minus, Plus } from \"lucide-react\"\nimport { Bar, BarChart, ResponsiveContainer } from \"recharts\"\n\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \".\"\nimport { useMediaQuery } from \"../../utils/use-media-query\"\nimport { Button } from \"../button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"../dialog\"\nimport { Input } from \"../input\"\nimport { Label } from \"../label\"\n\n/**\n * ## Installation\n *\n * ```sh\n * $ yarn add @shadcn-ui-sass/drawer\n * # or\n * $ npm install @shadcn-ui-sass/drawer\n * ```\n *\n */\n\nconst meta: Meta<typeof Drawer> = {\n  title: \"Components/Drawer\",\n  component: Drawer,\n  tags: [\"autodocs\"],\n}\n\ntype Story = StoryObj<typeof Drawer>\n\nconst data = [\n  {\n    goal: 400,\n  },\n  {\n    goal: 300,\n  },\n  {\n    goal: 200,\n  },\n  {\n    goal: 300,\n  },\n  {\n    goal: 200,\n  },\n  {\n    goal: 278,\n  },\n  {\n    goal: 189,\n  },\n  {\n    goal: 239,\n  },\n  {\n    goal: 300,\n  },\n  {\n    goal: 200,\n  },\n  {\n    goal: 278,\n  },\n  {\n    goal: 189,\n  },\n  {\n    goal: 349,\n  },\n]\nconst template = (args: any) => {\n  const [goal, setGoal] = useState(350)\n\n  function onClick(adjustment: number) {\n    setGoal(Math.max(200, Math.min(400, goal + adjustment)))\n  }\n\n  return (\n    <Drawer {...args}>\n      <DrawerTrigger asChild>\n        <Button variant=\"outline\">Open Drawer</Button>\n      </DrawerTrigger>\n      <DrawerContent>\n        <div\n          className=\"full-width margin-auto\"\n          style={{\n            maxWidth: \"24rem\",\n          }}\n        >\n          <DrawerHeader>\n            <DrawerTitle>Move Goal</DrawerTitle>\n            <DrawerDescription>Set your daily activity goal.</DrawerDescription>\n          </DrawerHeader>\n          <div className=\"padding-x-base padding-top-base\">\n            <div className=\"display-flex align-items-center justify-content-center gap-s\">\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                className=\"border-radius-circle\"\n                onClick={() => onClick(-10)}\n                disabled={goal <= 200}\n                style={{\n                  height: 32,\n                  width: 32,\n                }}\n              >\n                <Minus />\n                <span className=\"sr-only\">Decrease</span>\n              </Button>\n              <div className=\"flex1 text-align-center\">\n                <div\n                  className=\"font-bold\"\n                  style={{ fontSize: 72, lineHeight: 1 }}\n                >\n                  {goal}\n                </div>\n                <div className=\"font-size-xs text-uppercase text-neutral-7\">\n                  Calories/day\n                </div>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                className=\"border-radius-circle\"\n                onClick={() => onClick(10)}\n                disabled={goal >= 400}\n                style={{\n                  height: 32,\n                  width: 32,\n                }}\n              >\n                <Plus />\n                <span className=\"sr-only\">Increase</span>\n              </Button>\n            </div>\n            <div className=\"margin-top-base\" style={{ height: 120 }}>\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={data}>\n                  <Bar\n                    dataKey=\"goal\"\n                    style={\n                      {\n                        fill: \"hsl(var(--foreground))\",\n                        opacity: 0.9,\n                      } as React.CSSProperties\n                    }\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n          <DrawerFooter>\n            <Button>Submit</Button>\n            <DrawerClose asChild>\n              <Button variant=\"outline\">Cancel</Button>\n            </DrawerClose>\n          </DrawerFooter>\n        </div>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n\nexport const Default: Story = {\n  render: (args) => template(args),\n}\n\nexport const ResponsiveDialog: Story = {\n  render: (args) => {\n    const [open, setOpen] = useState(false)\n    const isDesktop = useMediaQuery(\"(min-width: 768px)\")\n\n    if (isDesktop) {\n      return (\n        <Dialog open={open} onOpenChange={setOpen}>\n          <DialogTrigger asChild>\n            <Button variant=\"outline\">Edit Profile</Button>\n          </DialogTrigger>\n          <DialogContent style={{ maxWidth: 425 }}>\n            <DialogHeader>\n              <DialogTitle>Edit profile</DialogTitle>\n              <DialogDescription>\n                Make changes to your profile here. Click save when you're done.\n              </DialogDescription>\n            </DialogHeader>\n            <form className=\"display-grid align-items-flex-start gap-base\">\n              <div className=\"display-grid gap-s\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  type=\"email\"\n                  id=\"email\"\n                  defaultValue=\"shadcn@example.com\"\n                />\n              </div>\n              <div className=\"display-grid gap-s\">\n                <Label htmlFor=\"username\">Username</Label>\n                <Input id=\"username\" defaultValue=\"@shadcn\" />\n              </div>\n              <Button type=\"submit\">Save changes</Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      )\n    }\n\n    return (\n      <Drawer {...args} open={open} onOpenChange={setOpen}>\n        <DrawerTrigger asChild>\n          <Button variant=\"outline\">Edit Profile</Button>\n        </DrawerTrigger>\n        <DrawerContent>\n          <DrawerHeader className=\"text-left\">\n            <DrawerTitle>Edit profile</DrawerTitle>\n            <DrawerDescription>\n              Make changes to your profile here. Click save when you're done.\n            </DrawerDescription>\n          </DrawerHeader>\n          <form className=\"display-grid align-items-start gap-base padding-x-base\">\n            <div className=\"display-grid gap-s\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                type=\"email\"\n                id=\"email\"\n                defaultValue=\"shadcn@example.com\"\n              />\n            </div>\n            <div className=\"display-grid gap-s\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input id=\"username\" defaultValue=\"@shadcn\" />\n            </div>\n            <Button type=\"submit\">Save changes</Button>\n          </form>\n          <DrawerFooter className=\"padding-top-s\">\n            <DrawerClose asChild>\n              <Button variant=\"outline\">Cancel</Button>\n            </DrawerClose>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    )\n  },\n}\n\nexport default meta\n"
    },
    {
      "name": "index.ts",
      "content": "export {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n} from \"./drawer\"\n"
    }
  ],
  "type": "components:ui"
}