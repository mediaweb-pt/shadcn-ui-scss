{
  "name": "alert-dialog",
  "dependencies": [
    "@radix-ui/react-alert-dialog"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "name": "alert-dialog.tsx",
      "content": "import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { buttonVariants } from \"../button\"\nimport \"./alert-dialog.scss\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\"alert-dialog-overlay\", className)}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\"alert-dialog-content\", className)}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"alert-dialog-header\", className)} {...props} />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"alert-dialog-footer\", className)} {...props} />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title ref={ref} className={cn(className)} {...props} />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(buttonVariants({ variant: \"outline\" }), className)}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"
    },
    {
      "name": "alert-dialog.scss",
      "content": ".alert-dialog {\n  &-overlay {\n    position: fixed;\n    inset: 0;\n    z-index: 50;\n    background-color: rgba(0, 0, 0, 0.8);\n\n    &[data-state=\"open\"],\n    &[motion^=\"from-\"],\n    &[data-state=\"visible\"] {\n      animation-name: enter;\n      animation-duration: 0.15s;\n      --enter-opacity: initial;\n      --enter-scale: initial;\n      --enter-rotate: initial;\n      --enter-translate-x: initial;\n      --enter-translate-y: initial;\n    }\n\n    &[data-state=\"closed\"],\n    &[motion^=\"to-\"],\n    &[data-state=\"hidden\"] {\n      animation-name: exit;\n      animation-duration: 0.15s;\n      --exit-opacity: initial;\n      --exit-scale: initial;\n      --exit-rotate: initial;\n      --exit-translate-x: initial;\n      --exit-translate-y: initial;\n    }\n\n    &[data-motion^=\"to-\"],\n    &[data-motion^=\"closed\"] {\n      --exit-opacity: 0;\n    }\n    &[data-motion^=\"from-\"],\n    &[data-motion^=\"visible\"] {\n      --enter-opacity: 0;\n    }\n  }\n\n  &-content {\n    --translate-x: -50%;\n    --translate-y: -50%;\n    position: fixed;\n    left: 50%;\n    top: 50%;\n    z-index: 50;\n    display: grid;\n    width: 100%;\n    max-width: 32rem;\n    transform: translate(var(--translate-x), var(--translate-y)) rotate(0)\n      skewX(0) skewY(0) scaleX(1) scaleY(1);\n    gap: var(--space-base);\n    border: var(--border-size-s) solid hsl(var(--border));\n    background-color: hsl(var(--background));\n    padding: var(--space-m);\n    box-shadow: var(--shadow-l);\n    transition-duration: 0.2s;\n\n    &[data-motion^=\"from-\"],\n    &[data-state=\"open\"],\n    &[data-state=\"visible\"] {\n      animation-name: enter;\n      animation-duration: 0.15s;\n      --enter-opacity: initial;\n      --enter-scale: initial;\n      --enter-rotate: initial;\n      --enter-translate-x: initial;\n      --enter-translate-y: initial;\n    }\n\n    &[data-motion^=\"to-\"],\n    &[data-state=\"closed\"],\n    &[data-state=\"hidden\"] {\n      animation-name: exit;\n      animation-duration: 0.15s;\n      --exit-opacity: initial;\n      --exit-scale: initial;\n      --exit-rotate: initial;\n      --exit-translate-x: initial;\n      --exit-translate-y: initial;\n    }\n\n    &[data-motion^=\"to-\"],\n    &[data-state=\"closed\"] {\n      --exit-opacity: 0;\n    }\n\n    &[data-motion^=\"from-\"],\n    &[data-state=\"visible\"] {\n      --enter-opacity: 0;\n    }\n\n    &[data-state=\"closed\"] {\n      --exit-scale: 0.95;\n      --exit-translate-x: -50%;\n      --exit-translate-y: -48%;\n    }\n\n    &[data-state=\"open\"] {\n      --enter-scale: 0.95;\n      --enter-translate-x: -50%;\n      --enter-translate-y: -48%;\n    }\n\n    border-radius: var(--border-radius-soft);\n  }\n\n  &-header {\n    display: flex;\n    flex-direction: column;\n    text-align: center;\n\n    @media (min-width: 640px) {\n      text-align: left;\n    }\n  }\n\n  &-footer {\n    display: flex;\n    flex-direction: column-reverse;\n    gap: var(--space-base);\n\n    @media (min-width: 640px) {\n      flex-direction: row;\n      justify-content: end;\n      gap: var(--space-s);\n    }\n  }\n}\n"
    },
    {
      "name": "alert-dialog.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \".\"\nimport { Button } from \"../button\"\n\n/**\n * ## Installation\n *\n * ```sh\n * $ yarn add @shadcn-ui-sass/alert-dialog\n * # or\n * $ npm install @shadcn-ui-sass/alert-dialog\n * ```\n *\n */\n\nconst meta: Meta<typeof AlertDialog> = {\n  title: \"Components/AlertDialog\",\n  component: AlertDialog,\n  tags: [\"autodocs\"],\n}\n\ntype Story = StoryObj<typeof AlertDialog>\n\nconst template = (args: any) => (\n  <AlertDialog {...args}>\n    <AlertDialogTrigger asChild>\n      <Button variant=\"outline\">Show Dialog</Button>\n    </AlertDialogTrigger>\n    <AlertDialogContent>\n      <AlertDialogHeader>\n        <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n        <AlertDialogDescription>\n          This action cannot be undone. This will permanently delete your\n          account and remove your data from our servers.\n        </AlertDialogDescription>\n      </AlertDialogHeader>\n      <AlertDialogFooter>\n        <AlertDialogCancel>Cancel</AlertDialogCancel>\n        <AlertDialogAction>Continue</AlertDialogAction>\n      </AlertDialogFooter>\n    </AlertDialogContent>\n  </AlertDialog>\n)\n\nexport const Default: Story = {\n  render: (args) => template(args),\n}\n\nexport default meta\n"
    },
    {
      "name": "index.ts",
      "content": "export {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n} from \"./alert-dialog\"\n"
    }
  ],
  "type": "components:ui"
}