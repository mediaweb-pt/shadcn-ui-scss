{
  "name": "breadcrumb",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "name": "breadcrumb.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, Ellipsis } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport \"./breadcrumb.scss\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol ref={ref} className={cn(\"breadcrumbs-list\", className)} {...props} />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"breadcrumbs-item\", className)} {...props} />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp ref={ref} className={cn(\"breadcrumbs-link\", className)} {...props} />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"breadcrumbs-page\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"breadcrumbs-separator\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"breadcrumbs-ellipsis\", className)}\n    {...props}\n  >\n    <Ellipsis />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n"
    },
    {
      "name": "breadcrumb.scss",
      "content": ".breadcrumbs {\n  &-list {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    gap: var(--space-xs);\n    overflow-wrap: break-word;\n    font-size: var(--font-size-s);\n    color: hsl(var(--muted-foreground));\n\n    @media (min-width: 640px) {\n      gap: var(--space-s);\n    }\n  }\n\n  &-item {\n    display: inline-flex;\n    align-items: center;\n    gap: var(--space-xs);\n\n    .dropdown-menu-trigger {\n      border-width: var(--border-size-none);\n      background-color: transparent;\n      cursor: pointer;\n      color: hsl(var(--muted-foreground));\n      padding: var(--space-none);\n      display: flex;\n      align-items: center;\n      gap: var(--space-xs);\n    }\n  }\n\n  &-link {\n    transition-property: color, background-color, border-color,\n      text-decoration-color, fill, stroke;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 0.15s;\n\n    &,\n    &:visited {\n      color: hsl(var(--muted-foreground));\n    }\n\n    &:hover {\n      color: hsl(var(--foreground));\n      text-decoration: none;\n    }\n  }\n\n  &-page {\n    font-weight: var(--font-regular);\n    color: hsl(var(--foreground));\n  }\n\n  &-separator {\n    .icon {\n      font-size: var(--font-size-s);\n    }\n\n    > svg {\n      width: var(--font-size-s);\n      height: var(--font-size-s);\n    }\n  }\n\n  &-ellipsis {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    .icon {\n      font-size: var(--font-size-base);\n    }\n\n    > svg {\n      width: var(--font-size-base);\n      height: var(--font-size-base);\n    }\n  }\n}\n"
    },
    {
      "name": "breadcrumb.stories.tsx",
      "content": "import { useState } from \"react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\nimport { ChevronDownIcon, Slash } from \"lucide-react\"\n\nimport {\n  Breadcrumb,\n  BreadcrumbEllipsis,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \".\"\nimport { useMediaQuery } from \"../../utils/use-media-query\"\nimport { Button } from \"../button\"\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"../drawer\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"../dropdown-menu\"\n\n/**\n * ## Installation\n *\n * ```sh\n * $ yarn add @shadcn-ui-sass/breadcrumbs\n * # or\n * $ npm install @shadcn-ui-sass/breadcrumbs\n * ```\n *\n */\n\nconst meta: Meta<typeof Breadcrumb> = {\n  title: \"Components/Breadcrumb\",\n  component: Breadcrumb,\n  tags: [\"autodocs\"],\n}\n\ntype Story = StoryObj<typeof Breadcrumb>\n\nconst template = (args: any) => (\n  <Breadcrumb {...args}>\n    <BreadcrumbList>\n      <BreadcrumbItem>\n        <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n      </BreadcrumbItem>\n      <BreadcrumbSeparator />\n      <BreadcrumbItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger>\n            <BreadcrumbEllipsis />\n            <span className=\"sr-only\">Toggle menu</span>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"start\">\n            <DropdownMenuItem>Documentation</DropdownMenuItem>\n            <DropdownMenuItem>Themes</DropdownMenuItem>\n            <DropdownMenuItem>GitHub</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </BreadcrumbItem>\n      <BreadcrumbSeparator />\n      <BreadcrumbItem>\n        <BreadcrumbLink href=\"/docs/components\">Components</BreadcrumbLink>\n      </BreadcrumbItem>\n      <BreadcrumbSeparator />\n      <BreadcrumbItem>\n        <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n      </BreadcrumbItem>\n    </BreadcrumbList>\n  </Breadcrumb>\n)\n\nexport const Default: Story = {\n  render: (args) => template(args),\n}\n\nexport const CustomSeparator: Story = {\n  render: (args) => (\n    <Breadcrumb {...args}>\n      <BreadcrumbList>\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <Slash />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/components\">Components</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <Slash />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  ),\n}\n\nexport const Dropdown: Story = {\n  render: (args) => (\n    <Breadcrumb {...args}>\n      <BreadcrumbList>\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <Slash />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem>\n          <DropdownMenu>\n            <DropdownMenuTrigger>\n              Components\n              <ChevronDownIcon />\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"start\">\n              <DropdownMenuItem>Documentation</DropdownMenuItem>\n              <DropdownMenuItem>Themes</DropdownMenuItem>\n              <DropdownMenuItem>GitHub</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <Slash />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  ),\n}\n\nexport const LinkComponent: Story = {\n  render: (args) => (\n    <Breadcrumb {...args}>\n      <BreadcrumbList>\n        <BreadcrumbItem>\n          <BreadcrumbLink asChild>\n            <a href=\"/\">Home</a>\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <Slash />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem>\n          <BreadcrumbLink asChild>\n            <a href=\"/components\">Components</a>\n          </BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbSeparator>\n          <Slash />\n        </BreadcrumbSeparator>\n        <BreadcrumbItem>\n          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>\n        </BreadcrumbItem>\n      </BreadcrumbList>\n    </Breadcrumb>\n  ),\n}\n\nconst items = [\n  { href: \"#\", label: \"Home\" },\n  { href: \"#\", label: \"Documentation\" },\n  { href: \"#\", label: \"Building Your Application\" },\n  { href: \"#\", label: \"Data Fetching\" },\n  { label: \"Caching and Revalidating\" },\n]\n\nconst ITEMS_TO_DISPLAY = 3\nexport const Responsive: Story = {\n  render: (args) => {\n    const [open, setOpen] = useState(false)\n    const isDesktop = useMediaQuery(\"(min-width: 768px)\")\n\n    return (\n      <Breadcrumb {...args}>\n        <BreadcrumbList>\n          <BreadcrumbItem>\n            <BreadcrumbLink href={items[0].href}>\n              {items[0].label}\n            </BreadcrumbLink>\n          </BreadcrumbItem>\n          <BreadcrumbSeparator />\n          {items.length > ITEMS_TO_DISPLAY ? (\n            <>\n              <BreadcrumbItem>\n                {isDesktop ? (\n                  <DropdownMenu open={open} onOpenChange={setOpen}>\n                    <DropdownMenuTrigger\n                      className=\"flex items-center gap-1\"\n                      aria-label=\"Toggle menu\"\n                    >\n                      <BreadcrumbEllipsis className=\"h-4 w-4\" />\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"start\">\n                      {items.slice(1, -2).map((item, index) => (\n                        <DropdownMenuItem key={index}>\n                          <a href={item.href ? item.href : \"#\"}>{item.label}</a>\n                        </DropdownMenuItem>\n                      ))}\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                ) : (\n                  <Drawer open={open} onOpenChange={setOpen}>\n                    <DrawerTrigger aria-label=\"Toggle Menu\">\n                      <BreadcrumbEllipsis />\n                    </DrawerTrigger>\n                    <DrawerContent>\n                      <DrawerHeader className=\"text-align-left\">\n                        <DrawerTitle>Navigate to</DrawerTitle>\n                        <DrawerDescription>\n                          Select a page to navigate to.\n                        </DrawerDescription>\n                      </DrawerHeader>\n                      <div className=\"display-grid gap-xs padding-x-base\">\n                        {items.slice(1, -2).map((item, index) => (\n                          <a\n                            key={index}\n                            href={item.href ? item.href : \"#\"}\n                            className=\"padding-y-xs font-size-s\"\n                          >\n                            {item.label}\n                          </a>\n                        ))}\n                      </div>\n                      <DrawerFooter className=\"padding-top-base\">\n                        <DrawerClose asChild>\n                          <Button variant=\"outline\">Close</Button>\n                        </DrawerClose>\n                      </DrawerFooter>\n                    </DrawerContent>\n                  </Drawer>\n                )}\n              </BreadcrumbItem>\n              <BreadcrumbSeparator />\n            </>\n          ) : null}\n          {items.slice(-ITEMS_TO_DISPLAY + 1).map((item, index) => (\n            <BreadcrumbItem key={index}>\n              {item.href ? (\n                <>\n                  <BreadcrumbLink\n                    asChild\n                    className=\"text-ellipsis\"\n                    style={{ maxWidth: 20 }}\n                  >\n                    <a href={item.href}>{item.label}</a>\n                  </BreadcrumbLink>\n                  <BreadcrumbSeparator />\n                </>\n              ) : (\n                <BreadcrumbPage\n                  className=\"text-ellipsis\"\n                  style={{ maxWidth: 20 }}\n                >\n                  {item.label}\n                </BreadcrumbPage>\n              )}\n            </BreadcrumbItem>\n          ))}\n        </BreadcrumbList>\n      </Breadcrumb>\n    )\n  },\n}\n\nexport default meta\n"
    },
    {
      "name": "index.ts",
      "content": "export {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n} from \"./breadcrumb\"\n"
    }
  ],
  "type": "components:ui"
}