{
  "name": "button",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "name": "button.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport \"./button.scss\"\n\nconst buttonVariants = cva(\"btn\", {\n  variants: {\n    variant: {\n      destructive: \"btn-destructive \",\n      outline: \"btn-outline \",\n      secondary: \"btn-secondary \",\n      ghost: \"btn-ghost \",\n      link: \"btn-link \",\n    },\n    size: {\n      sm: \"btn-sm \",\n      lg: \"btn-lg \",\n      icon: \"btn-icon \",\n    },\n  },\n})\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
    },
    {
      "name": "button.scss",
      "content": ".btn {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap;\n  border-radius: var(--border-radius-soft);\n  font-size: var(--font-size-s);\n  font-weight: var(--font-medium);\n  transition-property: color, background-color, border-color,\n    text-decoration-color, fill, stroke;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 0.15s;\n  background-color: hsl(var(--primary));\n  color: hsl(var(--primary-foreground));\n  border: var(--border-size-none);\n  height: 2.25rem;\n  padding: var(--space-s) var(--space-base);\n  cursor: pointer;\n  gap: var(--space-s);\n\n  .icon {\n    font-size: var(--font-size-base);\n  }\n\n  > svg {\n    width: var(--font-size-base);\n    height: var(--font-size-base);\n  }\n\n  &:hover {\n    background-color: hsl(var(--primary) / 0.9);\n  }\n\n  &:focus-visible {\n    outline-offset: 2px;\n    outline: 2px solid transparent;\n    box-shadow: 0 0 #0000;\n  }\n\n  &[disabled] {\n    pointer-events: none;\n    opacity: 0.5;\n  }\n\n  &-destructive {\n    background-color: hsl(var(--destructive));\n    color: hsl(var(--destructive-foreground));\n\n    &:hover {\n      background-color: hsl(var(--destructive) / 0.9);\n    }\n  }\n\n  &-outline {\n    border: var(--border-size-s) solid hsl(var(--input));\n    background-color: hsl(var(--background));\n    color: hsl(var(--foreground));\n\n    &:hover {\n      background-color: hsl(var(--accent));\n      color: hsl(var(--accent-foreground));\n    }\n  }\n\n  &-secondary {\n    background-color: hsl(var(--secondary));\n    color: hsl(var(--secondary-foreground));\n\n    &:hover {\n      background-color: hsl(var(--secondary) / 0.8);\n    }\n  }\n\n  &-ghost {\n    background-color: transparent;\n    color: hsl(var(--foreground));\n\n    &:hover {\n      background-color: hsl(var(--accent));\n      color: hsl(var(--accent-foreground));\n    }\n  }\n\n  &-link {\n    background-color: transparent;\n    color: hsl(var(--primary));\n    text-underline-offset: 4px;\n\n    &:hover {\n      background-color: transparent;\n      text-decoration-line: underline;\n    }\n  }\n\n  &-icon {\n    width: 2.25rem;\n    height: 2.25rem;\n    padding: var(--space-none);\n  }\n\n  // sizes\n  &-sm {\n    height: 2.05rem;\n    padding: var(--space-none) var(--space-s);\n  }\n\n  &-lg {\n    height: 2.5rem;\n    padding: var(--space-none) var(--space-l);\n  }\n}\n"
    },
    {
      "name": "button.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\nimport { ChevronRight, Loader2, Mail } from \"lucide-react\"\n\nimport { Button, buttonVariants } from \".\"\n\n/**\n * ## Installation\n *\n * ```sh\n * $ yarn add @shadcn-ui-sass/button\n * # or\n * $ npm install @shadcn-ui-sass/button\n * ```\n *\n */\n\nconst meta: Meta<typeof Button> = {\n  title: \"Components/Button\",\n  component: Button,\n  tags: [\"autodocs\"],\n}\n\ntype Story = StoryObj<typeof Button>\n\nconst template = (args: any) => <Button {...args}>Button</Button>\n\nexport const Default: Story = {\n  render: (args) => template(args),\n}\n\nexport const LinkUsage: Story = {\n  render: (args) => (\n    <div className=\"display-flex gap-base\">\n      <a href=\"!#\" className={buttonVariants({ variant: \"outline\" })}>\n        Click here\n      </a>\n      <Button asChild {...args}>\n        <a href=\"!#\">Login</a>\n      </Button>\n    </div>\n  ),\n}\n\nexport const Secondary: Story = {\n  args: { variant: \"secondary\" },\n  render: (args) => <Button {...args}>Secondary</Button>,\n}\n\nexport const Destructive: Story = {\n  args: { variant: \"destructive\" },\n  render: (args) => <Button {...args}>Destructive</Button>,\n}\n\nexport const Outline: Story = {\n  args: { variant: \"outline\" },\n  render: (args) => <Button {...args}>Outline</Button>,\n}\n\nexport const Ghost: Story = {\n  args: { variant: \"ghost\" },\n  render: (args) => <Button {...args}>Ghost</Button>,\n}\n\nexport const Link: Story = {\n  args: { variant: \"link\" },\n  render: (args) => <Button {...args}>Link</Button>,\n}\n\nexport const Icon: Story = {\n  args: { variant: \"outline\", size: \"icon\" },\n  render: (args) => (\n    <Button {...args}>\n      <ChevronRight />\n    </Button>\n  ),\n}\n\nexport const ButtonWithIcon: Story = {\n  render: (args) => (\n    <Button {...args}>\n      <Mail /> Login with Email\n    </Button>\n  ),\n}\n\nexport const Sizes: Story = {\n  argTypes: {\n    size: { options: [\"default\", \"sm\", \"lg\"], control: { type: \"select\" } },\n  },\n  render: (args) => <Button {...args}>Button</Button>,\n}\n\nexport const Loading: Story = {\n  render: (args) => (\n    <Button disabled {...args}>\n      <Loader2 className=\"animate-spin\" /> Please wait\n    </Button>\n  ),\n}\n\nexport const AsChild: Story = {\n  render: (args) => (\n    <Button asChild {...args}>\n      <a href=\"!#\">Login</a>\n    </Button>\n  ),\n}\n\nexport default meta\n"
    },
    {
      "name": "index.ts",
      "content": "export { type ButtonProps, Button, buttonVariants } from \"./button\"\n"
    }
  ],
  "type": "components:ui"
}