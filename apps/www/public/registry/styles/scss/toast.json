{
  "name": "toast",
  "dependencies": [
    "@radix-ui/react-toast"
  ],
  "files": [
    {
      "name": "toast.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport \"./toast.scss\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\"toast-viewport\", className)}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\"toast\", {\n  variants: {\n    variant: {\n      default: \"\",\n      destructive: \"toast--destructive\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n})\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\"toast__action\", className)}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\"toast__close\", className)}\n    toast-close=\"\"\n    {...props}\n  >\n    <X size={16} />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"toast__title\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"toast__description\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n"
    },
    {
      "name": "use-toast.ts",
      "content": "// Inspired by react-hot-toast library\n\"use client\"\n\nimport * as React from \"react\"\n\nimport type { ToastActionElement, ToastProps } from \"./toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n"
    },
    {
      "name": "toaster.tsx",
      "content": "import {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"./toast\"\nimport { useToast } from \"./use-toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n"
    },
    {
      "name": "toast.scss",
      "content": ".toast {\n  align-items: center;\n  border: var(--border-size-s) solid hsl(var(--border));\n  border-radius: var(--border-radius-soft);\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),\n    0 4px 6px -4px rgba(0, 0, 0, 0.1);\n  display: flex;\n  justify-content: space-between;\n  overflow: hidden;\n  padding: var(--space-m) var(--space-l) var(--space-m) var(--space-base);\n  pointer-events: auto;\n  position: relative;\n  transition: 0.3s ease;\n  width: 100%;\n\n  &[data-swipe=\"cancel\"] {\n    transform: translateX(0px);\n  }\n\n  &[data-swipe=\"end\"] {\n    transform: translateX(var(--radix-toast-swipe-end-x));\n  }\n\n  &[data-swipe=\"move\"] {\n    transform: translateX(var(--radix-toast-swipe-end-x));\n    transition: none;\n  }\n  &[data-state=\"open\"] {\n    transform: translateX(0px);\n  }\n\n  &--destructive {\n    background-color: var(--color-error);\n    border-color: var(--color-error);\n    color: hsl(var(--destructive-foreground));\n  }\n\n  &__action {\n    align-items: center;\n    background-color: transparent;\n    border: var(--border-size-s) solid hsl(var(--input));\n    border-radius: var(--border-radius-soft);\n    display: inline-flex;\n    flex-shrink: 0;\n    font-size: var(--font-size-s);\n    font-weight: var(--font-semi-bold);\n    height: var(--space-l);\n    justify-content: center;\n    padding: 0 var(--space-base);\n    transition: 0.3s ease;\n\n    &:hover {\n      background-color: var(--color-neutral-2);\n    }\n\n    &:focus {\n      outline: var(--border-size-s) solid hsl(var(--foreground));\n    }\n\n    &[disabled] {\n      opacity: 0.5;\n      pointer-events: none;\n    }\n\n    .destructive & {\n      border-color: hsl(var(--muted) / 0.4);\n\n      &:hover {\n        background-color: var(--color-error);\n        border-color: hsl(var(--color-error) / 0.3);\n        color: hsl(var(--destructive-foreground));\n      }\n\n      &:focus {\n        outline: var(--border-size-s) solid var(--color-error);\n      }\n    }\n  }\n\n  &__close {\n    border-radius: var(--border-radius-soft);\n    color: var(--color-neutral-7);\n    opacity: 0;\n    padding: var(--space-s);\n    position: absolute;\n    right: var(--space-s);\n    top: var(--space-s);\n    transition: 0.3s ease;\n\n    .toast:hover & {\n      opacity: 1;\n    }\n\n    &:hover {\n      color: hsl(var(--foreground));\n    }\n\n    &:focus {\n      opacity: 1;\n      outline: 2px solid var(--foreground);\n    }\n\n    .destructive & {\n      color: var(--color-red-lighter);\n\n      &:hover {\n        color: var(--color-red-dark);\n      }\n\n      &:focus {\n        opacity: 1;\n        outline: 2px solid var(--color-red-lighter);\n      }\n    }\n  }\n\n  &__title {\n    font-size: var(--font-size-s);\n    font-weight: var(--font-semi-bold);\n  }\n\n  &__description {\n    font-size: var(--font-size-s);\n    opacity: 0.9;\n  }\n\n  &-viewport {\n    display: flex;\n    flex-direction: column-reverse;\n    max-height: 100vh;\n    padding: var(--space-base);\n    position: fixed;\n    top: 0;\n    width: 100%;\n    z-index: 100;\n\n    @media (min-width: 640px) {\n      bottom: 0;\n      flex-direction: column;\n      max-width: 420px;\n      right: 0;\n      top: auto;\n    }\n  }\n}\n"
    },
    {
      "name": "toast.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Toaster } from \".\"\nimport ToastDemo from \"../../example/toast-demo\"\n\n/**\n * ## Installation\n *\n * ```sh\n * $ yarn add @shadcn-ui-sass/toast\n * # or\n * $ npm install @shadcn-ui-sass/toast\n * ```\n *\n */\n\nconst meta: Meta<typeof ToastDemo> = {\n  title: \"Components/Toast\",\n  component: ToastDemo,\n  tags: [\"autodocs\"],\n}\n\ntype Story = StoryObj<typeof ToastDemo>\n\nconst template = (args: any) => (\n  <>\n    <ToastDemo {...args} />\n    <Toaster />\n  </>\n)\n\nexport const Default: Story = {\n  render: (args) => template(args),\n}\n\nexport default meta\n"
    },
    {
      "name": "index.ts",
      "content": "export {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n} from \"./toast\"\n\nexport { Toaster } from \"./toaster\"\n"
    }
  ],
  "type": "components:ui"
}