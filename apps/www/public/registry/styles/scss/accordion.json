{
  "name": "accordion",
  "dependencies": [
    "@radix-ui/react-accordion"
  ],
  "files": [
    {
      "name": "accordion.tsx",
      "content": "import * as React from \"react\"\r\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\r\nimport { ChevronDown } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nimport \"./accordion.scss\"\r\n\r\nconst Accordion = AccordionPrimitive.Root\r\n\r\nconst AccordionItem = React.forwardRef<\r\n  React.ElementRef<typeof AccordionPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\r\n>(({ className, ...props }, ref) => (\r\n  <AccordionPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\"accordion-item\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAccordionItem.displayName = \"AccordionItem\"\r\n\r\nconst AccordionTrigger = React.forwardRef<\r\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\r\n>(({ className, children, ...props }, ref) => (\r\n  <AccordionPrimitive.Header className=\"accordion-header\">\r\n    <AccordionPrimitive.Trigger\r\n      ref={ref}\r\n      className={cn(\"accordion-trigger\", className)}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <ChevronDown className=\"accordion-trigger-icon\" />\r\n    </AccordionPrimitive.Trigger>\r\n  </AccordionPrimitive.Header>\r\n))\r\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\r\n\r\nconst AccordionContent = React.forwardRef<\r\n  React.ElementRef<typeof AccordionPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\r\n>(({ className, children, ...props }, ref) => (\r\n  <AccordionPrimitive.Content\r\n    ref={ref}\r\n    className=\"accordion-content\"\r\n    {...props}\r\n  >\r\n    <div className={cn(className)}>{children}</div>\r\n  </AccordionPrimitive.Content>\r\n))\r\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\r\n\r\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\r\n"
    },
    {
      "name": "accordion.scss",
      "content": ".accordion {\n  &-item {\n    border-bottom: var(--border-size-s) solid hsl(var(--border));\n  }\n\n  &-header {\n    display: flex;\n    margin: var(--space-none);\n  }\n\n  &-trigger {\n    display: flex;\n    flex: 1 1 0%;\n    align-items: center;\n    justify-content: space-between;\n    padding: var(--space-base) var(--space-none);\n    font-weight: var(--font-medium);\n    transition-property: all;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 150ms;\n    cursor: pointer;\n    background-color: transparent;\n    border: var(--border-size-none);\n\n    &[data-state=\"open\"] .accordion-trigger-icon {\n      transform: rotate(-180deg);\n    }\n\n    &-icon {\n      height: 1rem;\n      width: 1rem;\n      flex-shrink: 0;\n      transition-property: transform;\n      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n      transition-duration: 0.2s;\n      animation-duration: 0.2s;\n    }\n  }\n\n  &-content {\n    overflow: hidden;\n    font-size: var(--font-size-s);\n    transition-property: all;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 150ms;\n\n    > div {\n      padding-bottom: var(--space-base);\n    }\n\n    &[data-state=\"closed\"] {\n      animation: accordion-up 0.2s ease-out;\n    }\n\n    &[data-state=\"open\"] {\n      animation: accordion-down 0.2s ease-out;\n    }\n  }\n\n  @keyframes accordion-up {\n    0% {\n      height: var(--radix-accordion-content-height);\n    }\n\n    100% {\n      height: 0;\n    }\n  }\n\n  @keyframes accordion-down {\n    0% {\n      height: 0;\n    }\n\n    100% {\n      height: var(--radix-accordion-content-height);\n    }\n  }\n}\n"
    },
    {
      "name": "accordion.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \".\"\n\n/**\n * ## Installation\n *\n * ```sh\n * $ yarn add @shadcn-ui-sass/accordion\n * # or\n * $ npm install @shadcn-ui-sass/accordion\n * ```\n *\n */\nconst meta: Meta<typeof Accordion> = {\n  title: \"Components/Accordion\",\n  component: Accordion,\n  tags: [\"autodocs\"],\n}\n\ntype Story = StoryObj<typeof Accordion>\n\nconst template = (args: any) => (\n  <Accordion type=\"single\" collapsible {...args}>\n    <AccordionItem value=\"item-1\">\n      <AccordionTrigger>Is it accessible?</AccordionTrigger>\n      <AccordionContent>\n        Yes. It adheres to the WAI-ARIA design pattern.\n      </AccordionContent>\n    </AccordionItem>\n    <AccordionItem value=\"item-2\">\n      <AccordionTrigger>Is it styled?</AccordionTrigger>\n      <AccordionContent>\n        Yes. It comes with default styles that matches the other\n        components&apos; aesthetic.\n      </AccordionContent>\n    </AccordionItem>\n    <AccordionItem value=\"item-3\">\n      <AccordionTrigger>Is it animated?</AccordionTrigger>\n      <AccordionContent>\n        Yes. It&apos;s animated by default, but you can disable it if you\n        prefer.\n      </AccordionContent>\n    </AccordionItem>\n  </Accordion>\n)\n\nexport const Default: Story = {\n  render: (args) => template(args),\n}\n\nexport default meta\n"
    },
    {
      "name": "index.ts",
      "content": "export {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"./accordion\"\n"
    }
  ],
  "type": "components:ui"
}