{
  "name": "dialog",
  "dependencies": [
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "name": "dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { DialogProps } from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport \"./dialog.scss\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\"dialog-overlay\", className)}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\"dialog-content\", className)}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"dialog-close\">\n        <X />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"dialog-header\", className)} {...props} />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"dialog-footer\", className)} {...props} />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\"dialog-title\", className)}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"dialog-description\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  type DialogProps,\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"
    },
    {
      "name": "dialog.scss",
      "content": ".dialog {\n  &-overlay {\n    position: fixed;\n    inset: 0;\n    z-index: 50;\n    background-color: rgba(0, 0, 0, 0.8);\n\n    &[data-motion^=\"from-\"],\n    &[data-state=\"open\"],\n    &[data-state=\"visible\"] {\n      animation-name: enter;\n      animation-duration: 0.15s;\n      --enter-opacity: initial;\n      --enter-scale: initial;\n      --enter-rotate: initial;\n      --enter-translate-x: initial;\n      --enter-translate-y: initial;\n    }\n\n    &[data-state=\"open\"],\n    &[data-state=\"visible\"] {\n      --enter-opacity: 0;\n    }\n\n    &[data-motion^=\"to-\"],\n    &[data-state=\"closed\"],\n    &[data-state=\"hidden\"],\n    &[data-swipe=\"end\"] {\n      animation-name: exit;\n      animation-duration: 0.15s;\n      --exit-opacity: initial;\n      --exit-scale: initial;\n      --exit-rotate: initial;\n      --exit-translate-x: initial;\n      --exit-translate-y: initial;\n    }\n\n    &[data-motion^=\"to-\"],\n    &[data-state=\"closed\"] {\n      --exit-opacity: 0;\n    }\n  }\n\n  &-content {\n    position: fixed;\n    left: 50%;\n    top: 50%;\n    z-index: 50;\n    display: grid;\n    width: 100%;\n    max-width: 32rem;\n    transform: translate(-50%, -50%) rotate(0) skewX(0) skewY(0) scaleX(1)\n      scaleY(1);\n    gap: var(--space-base);\n    border: var(--border-size-s) solid hsl(var(--border));\n    background-color: hsl(var(--background));\n    padding: var(--space-m);\n    box-shadow: var(--shadow-l);\n    transition-duration: 0.2s;\n\n    @media (min-width: 640px) {\n      border-radius: var(--border-radius-soft);\n    }\n\n    &[data-motion^=\"from-\"],\n    &[data-state=\"open\"],\n    &[data-state=\"visible\"] {\n      animation-name: enter;\n      animation-duration: 0.15s;\n      --enter-opacity: initial;\n      --enter-scale: initial;\n      --enter-rotate: initial;\n      --enter-translate-x: initial;\n      --enter-translate-y: initial;\n    }\n\n    &[data-state=\"open\"],\n    &[data-state=\"visible\"] {\n      --enter-opacity: 0;\n    }\n\n    &[data-state=\"open\"] {\n      --enter-scale: 0.95;\n    }\n\n    &[data-state=\"open\"] {\n      --enter-translate-x: -50%;\n    }\n\n    &[data-state=\"open\"] {\n      --enter-translate-y: -48%;\n    }\n\n    &[data-motion^=\"to-\"],\n    &[data-state=\"closed\"],\n    &[data-state=\"hidden\"],\n    &[data-swipe=\"end\"] {\n      animation-name: exit;\n      animation-duration: 0.15s;\n      --exit-opacity: initial;\n      --exit-scale: initial;\n      --exit-rotate: initial;\n      --exit-translate-x: initial;\n      --exit-translate-y: initial;\n    }\n\n    &[data-motion^=\"to-\"],\n    &[data-state=\"closed\"] {\n      --exit-opacity: 0;\n    }\n\n    &[data-state=\"closed\"] {\n      --exit-scale: 0.95;\n    }\n\n    &[data-state=\"closed\"] {\n      --exit-translate-x: -50%;\n    }\n\n    &[data-state=\"closed\"] {\n      --exit-translate-y: -48%;\n    }\n  }\n\n  &-close {\n    --ring-offset-color: hsl(var(--background));\n    position: absolute;\n    right: var(--space-base);\n    top: var(--space-base);\n    border-radius: var(--border-radius-soft);\n    opacity: 0.7;\n    transition-property: opacity;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 0.15s;\n\n    .icon {\n      font-size: var(--font-size-base);\n    }\n\n    > svg {\n      width: var(--font-size-base);\n      height: var(--font-size-base);\n    }\n\n    &:hover {\n      opacity: 1;\n    }\n\n    &:focus {\n      outline: 2px solid transparent;\n      outline-offset: 2px;\n      box-shadow: 0 0 #0000;\n    }\n\n    &:disabled {\n      pointer-events: none;\n    }\n\n    &[state=\"open\"] {\n      background-color: hsl(var(--accent));\n      color: hsl(var(--muted-foreground));\n    }\n  }\n\n  &-header {\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-s);\n    text-align: center;\n\n    @media (min-width: 640px) {\n      text-align: left;\n    }\n  }\n\n  &-footer {\n    display: flex;\n    flex-direction: column-reverse;\n\n    @media (min-width: 640px) {\n      justify-content: flex-end;\n      flex-direction: row;\n      gap: var(--space-s);\n    }\n  }\n\n  &-title {\n    font-size: var(--font-size-l);\n    font-weight: var(--font-semi-bold);\n    line-height: 1;\n    letter-spacing: -0.025em;\n  }\n\n  &-description {\n    font-size: var(--font-size-s);\n    color: hsl(var(--muted-foreground));\n  }\n}\n"
    },
    {
      "name": "dialog.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\nimport { Copy } from \"lucide-react\"\n\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \".\"\nimport { Row } from \"../../structure/Grid\"\nimport { Button } from \"../button\"\nimport { Input } from \"../input\"\nimport { Label } from \"../label\"\n\n/**\n * ## Installation\n *\n * ```sh\n * $ yarn add @shadcn-ui-sass/dialog\n * # or\n * $ npm install @shadcn-ui-sass/dialog\n * ```\n *\n */\n\nconst meta: Meta<typeof Dialog> = {\n  title: \"Components/Dialog\",\n  component: Dialog,\n  tags: [\"autodocs\"],\n}\n\ntype Story = StoryObj<typeof Dialog>\n\nconst template = (args: any) => (\n  <Dialog {...args}>\n    <DialogTrigger asChild>\n      <Button variant=\"outline\">Edit Profile</Button>\n    </DialogTrigger>\n    <DialogContent className=\"sm:max-w-[425px]\">\n      <DialogHeader>\n        <DialogTitle>Edit profile</DialogTitle>\n        <DialogDescription>\n          Make changes to your profile here. Click save when you're done.\n        </DialogDescription>\n      </DialogHeader>\n      <div className=\"display-grid gap-base padding-y-base\">\n        <Row columns={4} className=\"align-items-center\">\n          <Label htmlFor=\"name\" className=\"text-align-right\">\n            Name\n          </Label>\n          <Input id=\"name\" defaultValue=\"Pedro Duarte\" className=\"col-span-3\" />\n        </Row>\n        <Row columns={4} className=\"align-items-center\">\n          <Label htmlFor=\"username\" className=\"text-align-right\">\n            Username\n          </Label>\n          <Input\n            id=\"username\"\n            defaultValue=\"@peduarte\"\n            className=\"col-span-3\"\n          />\n        </Row>\n      </div>\n      <DialogFooter>\n        <Button type=\"submit\">Save changes</Button>\n      </DialogFooter>\n    </DialogContent>\n  </Dialog>\n)\n\nexport const Default: Story = {\n  render: (args) => template(args),\n}\n\nexport const CustomCloseButton: Story = {\n  render: (args) => (\n    <Dialog {...args}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\">Share</Button>\n      </DialogTrigger>\n      <DialogContent\n        style={{\n          maxWidth: \"28rem\",\n        }}\n      >\n        <DialogHeader>\n          <DialogTitle>Share link</DialogTitle>\n          <DialogDescription>\n            Anyone who has this link will be able to view this.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"display-flex align-items-center gap-s\">\n          <div className=\"display-grid flex1 gap-s\">\n            <Label htmlFor=\"link\" className=\"sr-only\">\n              Link\n            </Label>\n            <Input\n              id=\"link\"\n              defaultValue=\"https://ui.shadcn.com/docs/installation\"\n              readOnly\n            />\n          </div>\n          <Button type=\"submit\" size=\"icon\">\n            <span className=\"sr-only\">Copy</span>\n            <Copy />\n          </Button>\n        </div>\n        <DialogFooter className=\"justify-content-flex-start\">\n          <DialogClose asChild>\n            <Button type=\"button\" variant=\"secondary\">\n              Close\n            </Button>\n          </DialogClose>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  ),\n}\n\nexport default meta\n"
    },
    {
      "name": "index.ts",
      "content": "export {\n  type DialogProps,\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n} from \"./dialog\"\n"
    }
  ],
  "type": "components:ui"
}