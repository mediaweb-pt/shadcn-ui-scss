{
  "name": "select",
  "dependencies": [
    "@radix-ui/react-select"
  ],
  "files": [
    {
      "name": "select.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport \"./select.scss\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\"select-trigger\", className)}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\"select-scrollUpButton\", className)}\n    {...props}\n  >\n    <ChevronUp />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\"select-scrollDownButton\", className)}\n    {...props}\n  >\n    <ChevronDown />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"select-content\",\n        {\n          popper: position === \"popper\",\n        },\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\"select-viewport\", {\n          popper: position === \"popper\",\n        })}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"select-label\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\"select-item\", className)}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"select-separator\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"
    },
    {
      "name": "select.scss",
      "content": ".select {\n  &-trigger {\n    --ring-offset-color: hsl(var(--background));\n    display: flex;\n    height: 2.5rem;\n    width: 100%;\n    align-items: center;\n    justify-content: space-between;\n    border-radius: var(--border-radius-soft);\n    border: var(--border-size-s) solid hsl(var(--input));\n    background-color: hsl(var(--background));\n    padding: var(--space-s) var(--space-base);\n    font-size: var(--font-size-s);\n\n    &::placeholder {\n      color: hsl(var(--muted-foreground));\n    }\n\n    &:focus {\n      --ring-offset-width: 2px;\n      --ring-color: hsl(var(--ring));\n      --ring-offset-shadow: var(--ring-inset) 0 0 0 var(--ring-offset-width)\n        var(--ring-offset-color);\n      --ring-shadow: var(--ring-inset) 0 0 0\n        calc(2px + var(--ring-offset-width)) var(--ring-color);\n      outline: 2px solid transparent;\n      outline-offset: 2px;\n      box-shadow: var(--ring-offset-shadow), var(--ring-shadow),\n        var(--shadow, 0 0 #0000);\n    }\n\n    &:disabled {\n      cursor: not-allowed;\n      opacity: 0.5;\n    }\n\n    > span {\n      overflow: hidden;\n      display: -webkit-box;\n      -webkit-box-orient: vertical;\n      -webkit-line-clamp: 1;\n    }\n\n    .icon,\n    > svg {\n      opacity: 0.5;\n    }\n\n    .icon {\n      font-size: var(--font-size-base);\n    }\n\n    > svg {\n      height: var(--font-size-base);\n      width: var(--font-size-base);\n    }\n  }\n\n  &-scrollUpButton {\n    display: flex;\n    cursor: default;\n    align-items: center;\n    justify-content: center;\n    padding: var(--space-none) var(--space-xs);\n  }\n\n  &-scrollDownButton {\n    display: flex;\n    cursor: default;\n    align-items: center;\n    justify-content: center;\n    padding: var(--space-none) var(--space-xs);\n  }\n\n  &-content {\n    position: relative;\n    z-index: 50;\n    max-height: 24rem;\n    min-width: 8rem;\n    overflow: hidden;\n    border-radius: var(--border-radius-soft);\n    border: var(--border-size-s) solid hsl(var(--border));\n    background-color: hsl(var(--popover));\n    color: hsl(var(--popover-foreground));\n    box-shadow: var(--shadow-m);\n\n    &[data-motion^=\"from-\"],\n    &[data-state=\"open\"],\n    &[data-state=\"visible\"] {\n      animation-name: enter;\n      animation-duration: 0.15s;\n      --enter-opacity: initial;\n      --enter-scale: initial;\n      --enter-rotate: initial;\n      --enter-translate-x: initial;\n      --enter-translate-y: initial;\n    }\n\n    &[data-state=\"open\"],\n    &[data-state=\"visible\"] {\n      --enter-opacity: 0;\n    }\n\n    &[data-state=\"open\"] {\n      --enter-scale: 0.95;\n    }\n\n    &[data-side=\"bottom\"] {\n      --enter-translate-y: -0.5rem;\n    }\n\n    &[data-side=\"left\"] {\n      --enter-translate-x: 0.5rem;\n    }\n\n    &[data-side=\"right\"] {\n      --enter-translate-x: -0.5rem;\n    }\n\n    &[data-side=\"top\"] {\n      --enter-translate-y: 0.5rem;\n    }\n\n    &[data-motion^=\"to-\"],\n    &[data-state=\"closed\"],\n    &[data-state=\"hidden\"],\n    &[data-swipe=\"end\"] {\n      animation-name: exit;\n      animation-duration: 0.15s;\n      --exit-opacity: initial;\n      --exit-scale: initial;\n      --exit-rotate: initial;\n      --exit-translate-x: initial;\n      --exit-translate-y: initial;\n    }\n\n    &[data-motion^=\"to-\"],\n    &[data-state=\"closed\"] {\n      --exit-opacity: 0;\n    }\n\n    &[data-state=\"closed\"] {\n      --exit-scale: 0.95;\n    }\n\n    &.popper {\n      &[data-side=\"bottom\"] {\n        transform: translateY(0.25rem);\n      }\n\n      &[data-side=\"left\"] {\n        transform: translateX(-0.25rem);\n      }\n\n      &[data-side=\"right\"] {\n        transform: translateX(0.25rem);\n      }\n\n      &[data-side=\"top\"] {\n        transform: translateY(-0.25rem);\n      }\n    }\n  }\n\n  &-viewport {\n    padding: var(--space-xs);\n\n    &.popper {\n      height: var(--radix-select-trigger-height);\n      width: 100%;\n      min-width: var(--radix-select-trigger-width);\n    }\n  }\n\n  &-label {\n    padding: var(--space-xs) var(--space-s) var(--space-xs) var(--space-l);\n    font-size: var(--font-size-s);\n    font-weight: var(--font-semi-bold);\n  }\n\n  &-item {\n    position: relative;\n    display: flex;\n    width: 100%;\n    cursor: default;\n    user-select: none;\n    align-items: center;\n    border-radius: var(--border-radius-soft);\n    padding: var(--space-xs) var(--space-s) var(--space-xs) var(--space-l);\n    font-size: var(--font-size-s);\n    outline: 2px solid transparent;\n    outline-offset: 2px;\n\n    &:focus {\n      background-color: hsl(var(--accent));\n      color: hsl(var(--accent-foreground));\n    }\n\n    &[data-disabled] {\n      pointer-events: none;\n      opacity: 0.5;\n    }\n\n    > span:first-child {\n      position: absolute;\n      left: var(--space-s);\n      display: flex;\n      height: 0.875rem;\n      width: 0.875rem;\n      align-items: center;\n      justify-content: center;\n\n      .icon {\n        font-size: var(--font-size-base);\n      }\n\n      svg {\n        height: var(--font-size-base);\n        width: var(--font-size-base);\n      }\n    }\n  }\n\n  &-separator {\n    margin: var(--space-xs) calc(var(--space-xs) * -1) var(--space-xs)\n      calc(var(--space-xs) * -1);\n    height: 1px;\n    background-color: hsl(var(--muted));\n  }\n}\n"
    },
    {
      "name": "select.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\nimport { useForm } from \"react-hook-form\"\n\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from \".\"\nimport { Button } from \"../button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"../form\"\n\n/**\n * ## Installation\n *\n * ```sh\n * $ yarn add @shadcn-ui-sass/select\n * # or\n * $ npm install @shadcn-ui-sass/select\n * ```\n *\n */\n\nconst meta: Meta<typeof Select> = {\n  title: \"Components/Select\",\n  component: Select,\n  tags: [\"autodocs\"],\n}\n\ntype Story = StoryObj<typeof Select>\n\nconst template = (args: any) => (\n  <Select {...args}>\n    <SelectTrigger style={{ width: 180 }}>\n      <SelectValue placeholder=\"Select a fruit\" />\n    </SelectTrigger>\n    <SelectContent>\n      <SelectGroup>\n        <SelectLabel>Fruits</SelectLabel>\n        <SelectItem value=\"apple\">Apple</SelectItem>\n        <SelectItem value=\"banana\">Banana</SelectItem>\n        <SelectItem value=\"blueberry\">Blueberry</SelectItem>\n        <SelectItem value=\"grapes\">Grapes</SelectItem>\n        <SelectItem value=\"pineapple\">Pineapple</SelectItem>\n      </SelectGroup>\n    </SelectContent>\n  </Select>\n)\n\nexport const Default: Story = {\n  render: (args) => template(args),\n}\n\nexport const Scrollable: Story = {\n  render: (args) => (\n    <Select {...args}>\n      <SelectTrigger style={{ width: 280 }}>\n        <SelectValue placeholder=\"Select a timezone\" />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectGroup>\n          <SelectLabel>North America</SelectLabel>\n          <SelectItem value=\"est\">Eastern Standard Time (EST)</SelectItem>\n          <SelectItem value=\"cst\">Central Standard Time (CST)</SelectItem>\n          <SelectItem value=\"mst\">Mountain Standard Time (MST)</SelectItem>\n          <SelectItem value=\"pst\">Pacific Standard Time (PST)</SelectItem>\n          <SelectItem value=\"akst\">Alaska Standard Time (AKST)</SelectItem>\n          <SelectItem value=\"hst\">Hawaii Standard Time (HST)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Europe & Africa</SelectLabel>\n          <SelectItem value=\"gmt\">Greenwich Mean Time (GMT)</SelectItem>\n          <SelectItem value=\"cet\">Central European Time (CET)</SelectItem>\n          <SelectItem value=\"eet\">Eastern European Time (EET)</SelectItem>\n          <SelectItem value=\"west\">\n            Western European Summer Time (WEST)\n          </SelectItem>\n          <SelectItem value=\"cat\">Central Africa Time (CAT)</SelectItem>\n          <SelectItem value=\"eat\">East Africa Time (EAT)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Asia</SelectLabel>\n          <SelectItem value=\"msk\">Moscow Time (MSK)</SelectItem>\n          <SelectItem value=\"ist\">India Standard Time (IST)</SelectItem>\n          <SelectItem value=\"cst_china\">China Standard Time (CST)</SelectItem>\n          <SelectItem value=\"jst\">Japan Standard Time (JST)</SelectItem>\n          <SelectItem value=\"kst\">Korea Standard Time (KST)</SelectItem>\n          <SelectItem value=\"ist_indonesia\">\n            Indonesia Central Standard Time (WITA)\n          </SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>Australia & Pacific</SelectLabel>\n          <SelectItem value=\"awst\">\n            Australian Western Standard Time (AWST)\n          </SelectItem>\n          <SelectItem value=\"acst\">\n            Australian Central Standard Time (ACST)\n          </SelectItem>\n          <SelectItem value=\"aest\">\n            Australian Eastern Standard Time (AEST)\n          </SelectItem>\n          <SelectItem value=\"nzst\">New Zealand Standard Time (NZST)</SelectItem>\n          <SelectItem value=\"fjt\">Fiji Time (FJT)</SelectItem>\n        </SelectGroup>\n        <SelectGroup>\n          <SelectLabel>South America</SelectLabel>\n          <SelectItem value=\"art\">Argentina Time (ART)</SelectItem>\n          <SelectItem value=\"bot\">Bolivia Time (BOT)</SelectItem>\n          <SelectItem value=\"brt\">Brasilia Time (BRT)</SelectItem>\n          <SelectItem value=\"clt\">Chile Standard Time (CLT)</SelectItem>\n        </SelectGroup>\n      </SelectContent>\n    </Select>\n  ),\n}\n\nexport const FromExample: Story = {\n  render: (args) => {\n    const form = useForm()\n\n    return (\n      <Form {...form}>\n        <form style={{ width: \"66.7%\" }}>\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email</FormLabel>\n                <Select\n                  {...args}\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a verified email to display\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"m@example.com\">m@example.com</SelectItem>\n                    <SelectItem value=\"m@google.com\">m@google.com</SelectItem>\n                    <SelectItem value=\"m@support.com\">m@support.com</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormDescription>\n                  You can manage email addresses in your{\" \"}\n                  <a href=\"/examples/forms\">email settings</a>.\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <Button type=\"submit\" className=\"margin-top-m\">\n            Submit\n          </Button>\n        </form>\n      </Form>\n    )\n  },\n}\n\nexport default meta\n"
    },
    {
      "name": "index.ts",
      "content": "export {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n} from \"./select\"\n"
    }
  ],
  "type": "components:ui"
}