{
  "name": "command",
  "dependencies": [
    "cmdk"
  ],
  "registryDependencies": [
    "dialog"
  ],
  "files": [
    {
      "name": "command.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { Dialog, DialogContent } from \"../dialog\"\nimport \"./command.scss\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive ref={ref} className={cn(\"command\", className)} {...props} />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"command-content-dialog\">\n        <Command>{children}</Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"command-input\" cmdk-input-wrapper=\"\">\n    <Search className=\"command-input-icon\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\"command-input-input\", className)}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"command-list\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty ref={ref} className=\"command-empty\" {...props} />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\"command-group\", className)}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"command-separator\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\"command-item\", className)}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn(\"command-shortcut\", className)} {...props} />\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n"
    },
    {
      "name": "command.scss",
      "content": ".command {\n  display: flex;\n  height: 100%;\n  width: 100%;\n  flex-direction: column;\n  overflow: hidden;\n  border-radius: var(--border-radius-soft);\n  background-color: hsl(var(--popover));\n  color: hsl(var(--popover-foreground));\n\n  &-content-dialog.dialog-content {\n    overflow: hidden;\n    padding: var(--space-none);\n    box-shadow: var(--shadow-l);\n\n    .command {\n      [cmdk-group]:not(hidden) ~ [cmdk-group] {\n        padding-top: var(--space-none);\n      }\n\n      [cmdk-group] {\n        padding-left: var(--space-s);\n        padding-right: var(--space-s);\n      }\n\n      [cmdk-input-wrapper] svg {\n        height: var(--font-size-l);\n        width: var(--font-size-l);\n      }\n\n      [cmdk-input] {\n        height: 3rem;\n      }\n\n      [cmdk-item] {\n        padding: var(--space-base) var(--space-s);\n\n        .icon {\n          font-size: var(--font-size-l);\n        }\n\n        svg {\n          height: var(--font-size-l);\n          width: var(--font-size-l);\n        }\n      }\n    }\n  }\n\n  &-input {\n    display: flex;\n    align-items: center;\n    border-bottom: var(--border-size-s) solid hsl(var(--border));\n    padding: var(--space-none) var(--space-s);\n\n    &-icon {\n      margin-right: var(--space-s);\n      flex-shrink: 0;\n      opacity: 0.5;\n      height: var(--font-size-base);\n      width: var(--font-size-base);\n    }\n\n    &-input {\n      display: flex;\n      height: 2.75rem;\n      width: 100%;\n      border-radius: var(--border-radius-soft);\n      background-color: transparent;\n      padding: var(--space-none) var(--space-s);\n      font-size: var(--font-size-s);\n      outline: 2px solid transparent;\n      outline-offset: 2px;\n\n      &::placeholder {\n        color: hsl(var(--muted-foreground));\n      }\n\n      &:disabled {\n        cursor: not-allowed;\n        opacity: 0.5;\n      }\n    }\n  }\n\n  &-list {\n    max-height: 300px;\n    overflow-y: auto;\n    overflow-x: hidden;\n  }\n\n  &-empty {\n    padding: var(--space-m) var(--space-none);\n    text-align: center;\n    font-size: var(--font-size-s);\n  }\n\n  &-group {\n    overflow: hidden;\n    padding: var(--space-xs);\n    color: hsl(var(--foreground));\n\n    [cmdk-group-heading] {\n      padding: var(--space-xs) var(--space-s);\n      font-size: var(--font-size-xs);\n      font-weight: var(--font-medium);\n      color: hsl(var(--muted-foreground));\n    }\n  }\n\n  &-separator {\n    margin: var(--space-none) calc(var(--space-xs) * -1);\n    height: 1px;\n    background-color: hsl(var(--border));\n  }\n\n  &-item {\n    position: relative;\n    display: flex;\n    cursor: default;\n    user-select: none;\n    align-items: center;\n    border-radius: var(--border-radius-soft);\n    padding: var(--space-xs) var(--space-s);\n    font-size: var(--font-size-s);\n    outline: 2px solid transparent;\n    outline-offset: 2px;\n\n    &[aria-selected=\"true\"] {\n      background-color: hsl(var(--accent));\n      color: hsl(var(--accent-foreground));\n    }\n\n    &[data-disabled=\"true\"] {\n      pointer-events: none;\n      opacity: 0.5;\n    }\n  }\n\n  &-shortcut {\n    margin-left: auto;\n    font-size: var(--font-size-xs);\n    letter-spacing: 0.1em;\n    color: hsl(var(--muted-foreground));\n  }\n}\n"
    },
    {
      "name": "command.stories.tsx",
      "content": "import { useEffect, useState } from \"react\"\nimport type { Meta, StoryObj } from \"@storybook/react\"\nimport {\n  Calculator,\n  Calendar,\n  CreditCard,\n  Settings,\n  Smile,\n  User,\n} from \"lucide-react\"\n\nimport {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from \".\"\n\n/**\n * ## Installation\n *\n * ```sh\n * $ yarn add @shadcn-ui-sass/command\n * # or\n * $ npm install @shadcn-ui-sass/command\n * ```\n *\n */\n\nconst meta: Meta<typeof Command> = {\n  title: \"Components/Command\",\n  component: Command,\n  tags: [\"autodocs\"],\n}\n\ntype Story = StoryObj<typeof Command>\n\nconst template = (args: any) => {\n  const [open, setOpen] = useState(false)\n\n  useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"j\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n\n    document.addEventListener(\"keydown\", down)\n    return () => document.removeEventListener(\"keydown\", down)\n  }, [])\n\n  return (\n    <>\n      <p className=\"font-size-s text-neutral-7\">\n        Press{\" \"}\n        <kbd\n          className=\"display-inline-flex align-items-center gap-xs border-radius-soft padding-x-xs font-size-xxs font-medium text-neutral-7\"\n          style={{\n            pointerEvents: \"none\",\n            userSelect: \"none\",\n            opacity: 1,\n            backgroundColor: \"hsl(var(--muted))\",\n            height: \"1.25rem\",\n            border: \"var(--border-size-s) solid hsl(var(--border))\",\n          }}\n        >\n          <span className=\"font-size-xs\">âŒ˜</span>J\n        </kbd>\n      </p>\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput placeholder=\"Type a command or search...\" />\n        <CommandList>\n          <CommandEmpty>No results found.</CommandEmpty>\n          <CommandGroup heading=\"Suggestions\">\n            <CommandItem>\n              <Calendar className=\"margin-right-base\" />\n              <span>Calendar</span>\n            </CommandItem>\n            <CommandItem>\n              <Smile className=\"margin-right-base\" />\n              <span>Search Emoji</span>\n            </CommandItem>\n            <CommandItem>\n              <Calculator className=\"margin-right-base\" />\n              <span>Calculator</span>\n            </CommandItem>\n          </CommandGroup>\n          <CommandSeparator />\n          <CommandGroup heading=\"Settings\">\n            <CommandItem>\n              <User className=\"margin-right-base\" />\n              <span>Profile</span>\n              <CommandShortcut>âŒ˜P</CommandShortcut>\n            </CommandItem>\n            <CommandItem>\n              <CreditCard className=\"margin-right-base\" />\n              <span>Billing</span>\n              <CommandShortcut>âŒ˜B</CommandShortcut>\n            </CommandItem>\n            <CommandItem>\n              <Settings className=\"margin-right-base\" />\n              <span>Settings</span>\n              <CommandShortcut>âŒ˜S</CommandShortcut>\n            </CommandItem>\n          </CommandGroup>\n        </CommandList>\n      </CommandDialog>\n    </>\n  )\n}\n\nexport const Default: Story = {\n  render: (args) => template(args),\n}\n\nexport default meta\n"
    },
    {
      "name": "index.ts",
      "content": "export {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n} from \"./command\"\n"
    }
  ],
  "type": "components:ui"
}