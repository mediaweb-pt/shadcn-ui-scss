{
  "name": "carousel",
  "dependencies": [
    "embla-carousel-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "name": "carousel.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { Button } from \"../button\"\nimport \"./carousel.scss\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions & {\n    space?: \"xs\" | \"s\" | \"base\" | \"m\" | \"l\" | \"xl\" | \"xxl\"\n    num?: number\n  }\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"carousel\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation, opts } = useCarousel()\n\n  return (\n    <div ref={carouselRef}>\n      <div\n        ref={ref}\n        className={cn(\n          \"carousel-content\",\n          {\n            horizontal: orientation === \"horizontal\",\n            vertical: orientation === \"vertical\",\n          },\n          className\n        )}\n        {...props}\n        style={{\n          ...(orientation === \"horizontal\" && {\n            marginLeft: `calc(var(--space-${opts?.space}) * -1)`,\n          }),\n          ...(orientation === \"vertical\" && {\n            marginTop: `calc(var(--space-${opts?.space}) * -1)`,\n          }),\n          ...props.style,\n        }}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation, opts } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"carousel-item\",\n        {\n          horizontal: orientation === \"horizontal\",\n          vertical: orientation === \"vertical\",\n        },\n        className\n      )}\n      style={{\n        ...(orientation === \"horizontal\" && {\n          paddingLeft: `var(--space-${opts?.space})`,\n        }),\n        ...(orientation === \"vertical\" && {\n          paddingTop: `var(--space-${opts?.space})`,\n        }),\n        ...(opts && opts.num && { flexBasis: `${100 / opts.num}%` }),\n      }}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"carousel-prev\",\n        {\n          horizontal: orientation === \"horizontal\",\n          vertical: orientation === \"vertical\",\n        },\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"carousel-next\",\n        {\n          horizontal: orientation === \"horizontal\",\n          vertical: orientation === \"vertical\",\n        },\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n"
    },
    {
      "name": "carousel.scss",
      "content": ".carousel {\n  position: relative;\n\n  > div {\n    overflow: hidden;\n  }\n\n  &-content {\n    display: flex;\n\n    &.vertical {\n      flex-direction: column;\n    }\n  }\n\n  &-item {\n    min-width: 0;\n    flex-shrink: 0;\n    flex-grow: 0;\n    flex-basis: 100%;\n\n    &.horizontal {\n      padding-left: var(--space-base);\n      padding-top: var(--space-none);\n    }\n  }\n\n  &-prev,\n  &-next {\n    position: absolute;\n    height: 2rem;\n    width: 2rem;\n    border-radius: var(--border-radius-circle);\n  }\n\n  &-prev {\n    &.horizontal {\n      left: calc(var(--space-xl) * -1);\n      top: 50%;\n      transform: translateY(-50%);\n    }\n\n    &.vertical {\n      left: 50%;\n      top: calc(var(--space-xl) * -1);\n      transform: translateX(-50%) rotate(90deg);\n    }\n  }\n\n  &-next {\n    &.horizontal {\n      right: calc(var(--space-xl) * -1);\n      top: 50%;\n      transform: translateY(-50%);\n    }\n\n    &.vertical {\n      left: 50%;\n      bottom: calc(var(--space-xl) * -1);\n      transform: translateX(-50%) rotate(90deg);\n    }\n  }\n}\n"
    },
    {
      "name": "carousel.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\n\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \".\"\nimport { Card, CardContent } from \"../card\"\n\n/**\n * ## Installation\n *\n * ```sh\n * $ yarn add @shadcn-ui-sass/carousel\n * # or\n * $ npm install @shadcn-ui-sass/carousel\n * ```\n *\n */\n\nconst meta: Meta<typeof Carousel> = {\n  title: \"Components/Carousel\",\n  component: Carousel,\n  tags: [\"autodocs\"],\n  args: {\n    opts: {\n      num: 1,\n      space: \"base\",\n    },\n  },\n  argTypes: {\n    opts: {\n      space: {\n        options: [\"xs\", \"s\", \"base\", \"m\", \"l\", \"xl\", \"xxl\"],\n        control: { type: \"select\" },\n      },\n    },\n    orientation: {\n      options: [\"horizontal\", \"vertical\"],\n      control: { type: \"select\" },\n    },\n  },\n}\n\ntype Story = StoryObj<typeof Carousel>\n\nconst template = (args: any) => (\n  <div className=\"display-flex justify-content-center margin-top-xxl\">\n    <Carousel\n      className=\"full-width\"\n      style={{ maxWidth: \"20rem\" }}\n      opts={{ space: args.opts.space, num: args.opts.num }}\n      orientation={args.orientation}\n    >\n      <CarouselContent\n        style={{\n          height:\n            args.orientation === \"vertical\"\n              ? args.opts.space === \"xs\" || args.opts.space === \"s\"\n                ? 200\n                : args.opts.space === \"base\"\n                ? 210\n                : args.opts.space === \"m\"\n                ? 220\n                : args.opts.space === \"l\"\n                ? 240\n                : args.opts.space === \"xl\"\n                ? 260\n                : args.opts.space === \"xxl\"\n                ? 270\n                : \"\"\n              : \"\",\n        }}\n      >\n        {Array.from({ length: 5 }).map((_, index) => (\n          <CarouselItem key={index}>\n            <div className=\"padding-xs full-height\">\n              <Card className=\"full-height\">\n                <CardContent\n                  className=\"display-flex align-items-center justify-content-center padding-m\"\n                  style={{\n                    ...(args.orientation === \"horizontal\" && {\n                      aspectRatio: \"1 / 1\",\n                    }),\n                  }}\n                >\n                  <span\n                    className=\"font-size-h2 font-semi-bold\"\n                    style={{ lineHeight: 1 }}\n                  >\n                    {index + 1}\n                  </span>\n                </CardContent>\n              </Card>\n            </div>\n          </CarouselItem>\n        ))}\n      </CarouselContent>\n      <CarouselPrevious />\n      <CarouselNext />\n    </Carousel>\n  </div>\n)\n\nexport const Default: Story = {\n  render: (args) => template(args),\n}\n\nexport const Sizes: Story = {\n  args: { opts: { num: 2 } },\n  render: (args) => template(args),\n}\n\nexport const Spacing: Story = {\n  args: { opts: { num: 2, space: \"xl\" } },\n  render: (args) => template(args),\n}\n\nexport const Oriention: Story = {\n  args: { opts: { num: 2 }, orientation: \"vertical\" },\n  render: (args) => template(args),\n}\n\nexport default meta\n"
    },
    {
      "name": "index.ts",
      "content": "export {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n} from \"./carousel\"\n"
    }
  ],
  "type": "components:ui"
}